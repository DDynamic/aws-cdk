import * as cdk from '@aws-cdk/core';
import { Stack } from '@aws-cdk/core';
import { Construct } from 'constructs';
import { CfnObservabilityConfiguration } from './apprunner.generated';


/**
 * The implementation provider for tracing App Runner services.
 */
export enum TracingVendor {
  /**
   * No Tracing Vendor
   */
  NONE = 'NONE',

  /**
   * AWS X-Ray
   */
  AWSXRAY = 'AWSXRAY'
}

/**
 * Properties of the AppRunner Observability Configuration
 */
export interface ObservabilityConfigurationProps {
  /**
   * The implementation provider for tracing App Runner services.
   *
   * @default Vendor.None
   */
  readonly traceConfiguration?: TracingVendor;

  /**
    * The name for the Observability Configuration.
    *
    * @default - a name generated by CloudFormation
    */
  readonly observabilityConfigurationName?: string;
}

/**
 * Represents the AppRunner Observability Configuration
 */
export interface IObservabilityConfiguration extends cdk.IResource {
  /**
   * The ARN of the Observability Configuration.
   * @attribute
   */
  readonly observabilityConfigurationArn: string;

  /**
   * The Name of the Observability Configuration.
   * @attribute
   */
  readonly configurationName: string;
}

/**
 * The App Runner Observability Configuration
 *
 * @resource AWS::AppRunner::ObservabilityConfiguration
 */
export class ObservabilityConfiguration extends cdk.Resource implements IObservabilityConfiguration {
  /**
   * Import an observability configuration by ARN.
   */
  public static fromObservabilityConfigurationArn(scope: Construct, id: string, observabilityConfigurationArn: string): IObservabilityConfiguration {
    class Import extends cdk.Resource implements IObservabilityConfiguration {
      public readonly observabilityConfigurationArn = observabilityConfigurationArn;
      public readonly configurationName = observabilityConfigurationArn.split('/')[1];
    }

    return new Import(scope, id);
  }

  /**
   * Import an observability configuration by name.
   */
  public static fromObservabilityConfigurationName(scope: Construct, id: string, observabilityConfigurationName: string):
  IObservabilityConfiguration {
    return ObservabilityConfiguration.fromObservabilityConfigurationArn(scope, id, Stack.of(scope).formatArn({
      service: 'apprunner',
      resource: 'observabilityconfiguration',
      resourceName: observabilityConfigurationName,
    }));
  }

  /**
   * True if this configuration is the latest revision among all configurations that share the same name.
   * @attribute
   */
  public readonly latest: cdk.IResolvable;

  /**
    * The ARN of the Observability Configuration.
    * @attribute
    */
  public readonly observabilityConfigurationArn: string;

  /**
    * The name of the Observability Configuration.
    * @attribute
    */
  public readonly configurationName: string;

  /**
   * The revision of the Observability Configuration.
   * @attribute
   */
  public readonly observabilityConfigurationRevision: number;

  public constructor(scope: Construct, id: string, props: ObservabilityConfigurationProps = {}) {
    super(scope, id, {
      physicalName: props.observabilityConfigurationName,
    });

    const resource = new CfnObservabilityConfiguration(this, 'Resource', {
      observabilityConfigurationName: this.physicalName,
      ...(props.traceConfiguration && props.traceConfiguration != TracingVendor.NONE ?
        { traceConfiguration: { vendor: props?.traceConfiguration } } : {}),
    });

    this.latest = resource.attrLatest;
    this.observabilityConfigurationArn = this.getResourceArnAttribute(resource.attrObservabilityConfigurationArn, {
      service: 'apprunner',
      resource: 'observabilityconfiguration',
    });
    this.configurationName = this.getResourceNameAttribute(resource.ref);
    this.observabilityConfigurationRevision = resource.attrObservabilityConfigurationRevision;
  }
}
